STL

The Standard Template Library(STL) is a set of C++ template classes.
STL mainly divided into three sub libraries:
a. Containers: It is a way that stored data is organized in memory[Elements of Array]
b. Algorithms: Procedures that are applied on containers [search,sort]
c. Iterators: Concepts of conatiners, which point to the elements in the container[find next elements]


                                STL
--> Vector 
--> Map
--> Algorithm
--> List
--> Stack   (Not in syllabus)
--> Tree   (Not in syllabus)
--> Set   (Not in syllabus)
--> Iterators
--> Etc

                                    Containers:
1. 

------------------------------------------------VECTORS--------------------------------------------------------------------
Vector are same as dynamic arrays with ability to resize itself automatically when an element is inserted or deleted.
Syntax:  vector<int> a;
vector<int> b;
        --> This can not done with array.
In vectors, data is inserted at the end:
    begin() – Returns an iterator pointing to the first element in the vector
    end() – Returns an iterator pointing to the theoretical element that follows the last element in the vector
    rbegin() – Returns a reverse iterator pointing to the last element in the vector (reverse beginning). It moves from last to first element
    rend() – Returns a reverse iterator pointing to the theoretical element
    size() – Returns the number of elements in the vector.
    max_size() – Returns the maximum number of elements that the vector can hold.
    capacity() – Returns the size of the storage space currently allocated to the vector expressed as number of elements.
    resize(n) – Resizes the container so that it contains ‘n’ elements.


-----------------------------------------------------MAPS-----------------------------------------------------------------
Maps are associative containers that store elements in a mapped fashion.
Each element has a key value and a mapped value.
No two mapped values can have the same key values.
    begin() – Returns an iterator to the first element in the map.
    end() – Returns an iterator to the theoretical element that follows the last element in the map.
    size() – Returns the number of elements in the map.
    max_size() – Returns the maximum number of elements that the map can hold.
    empty() – Returns whether the map is empty.
    pair insert(keyvalue, mapvalue) – Adds a new element to the map.
    erase(iterator position) – Removes the element at the position pointed by the iterator.
    erase(const g)– Removes the key-value ‘g’ from the map.
    clear() – Removes all the elements from the map.
    Find an Element:
    auto it=map1.find(3);
